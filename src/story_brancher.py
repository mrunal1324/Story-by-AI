import time
import requests
import re

def extract_genre_from_story(story_text):
    """
    Analyze the story to determine its genre.

    Args:
        story_text (str): The story text

    Returns:
        str: The detected genre
    """
    story_lower = story_text.lower()

    # Check for genre indicators in the story content
    if any(word in story_lower for word in ["love", "kiss", "relationship", "heart", "romance"]):
        return "romance"
    elif any(word in story_lower for word in ["space", "alien", "galaxy", "future", "technology", "robot"]):
        return "sci-fi"
    elif any(word in story_lower for word in ["magic", "dragon", "wizard", "spell", "kingdom", "enchant"]):
        return "fantasy"
    elif any(word in story_lower for word in ["detective", "clue", "mystery", "disappearance", "investigation"]):
        return "mystery"
    elif any(word in story_lower for word in ["history", "century", "ancient", "medieval", "renaissance"]):
        return "historical"
    elif any(word in story_lower for word in ["fear", "horror", "ghost", "haunted", "terror"]):
        return "horror"

    # Default to general fiction
    return "general"

def generate_plot_twist(story_text, creativity=0.85):
    """
    Generate a surprising but coherent plot twist using AI.

    Args:
        story_text (str): The story to generate a twist for
        creativity (float): Value between 0-1 controlling randomness

    Returns:
        str: A plot twist generated by AI
    """
    start_time = time.time()
    try:
        prompt = f"""Suggest a surprising, original, and logical plot twist for the following story. Keep it relevant to the narrative and genre.\n\nStory:\n{story_text}\n\nPlot Twist:"""

        response = requests.post(
            'http://localhost:11434/api/generate',
            json={
                'model': 'phi',
                'prompt': prompt,
                'stream': False
            }
        )
        twist = response.json()['response'].strip()
        twist = re.sub(r'[^.!?]*$', '', twist).strip()  # Clean incomplete endings

        print(f"Plot twist generation took {time.time() - start_time:.2f} seconds")
        return twist

    except Exception as e:
        print(f"Error generating twist via Ollama: {e}")
        return "An unexpected event changes everything, but its nature remains shrouded in mystery."
